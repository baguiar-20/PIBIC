#include<stdio.h>
#include<stdlib.h>
#include<string.h>

typedef struct tipoNo {
   int valor;
   struct tipoNo *prox;
} tipoNo;

tipoNo *criaLista();
tipoNo *inserirLista(tipoNo *, int);
void imprimeLista (tipoNo *);
void removerLista (tipoNo *);
void buscaLista (tipoNo *, int);
void concatenacaoLista (tipoNo *, tipoNo *);
void removeAllLista(tipoNo *l);
tipoNo *intercalaLista (tipoNo *, tipoNo *);

int contaChar(const char *str)
{
    int i = 0;
 
    for(;str[i] != 0; ++i);
 
    return i;
}

int bemFormada( char s[]){
   int t,cont=0; 
   int n, i;
  
   n = strlen( s);
   char pilha[n+1];
   
   t = 0;
   for (i = 0; s[i] != '\0'; ++i) {
      // a pilha estÃ¡ armazenada no vetor pilha[0..t-1]
	  if((s[i]== '(')||s[i]== ')'||s[i]== '['||s[i]== ']'){
      switch (s[i]) {
         case ')': if (t != 0 && pilha[t-1] == '(') {
                      --t;
					  cont++;
					  }
                   else return 0;
                   break;
         case ']': if (t != 0 && pilha[t-1] == '[') {
                      --t;
					  cont++;
					  }
                   else return 0;
                   break;
         default:  pilha[t++] = s[i];
      }
	  
	  
		
	  }
	  
   }
   if (cont==0)
		return 0;
   //printf("%d %d %d",t,i,n);
   //printf(" %d ",cont);
   return t == 0;
}

int main () {
   tipoNo *lista1;
    char COM[30]={}, Q[2]="[", D[2]="]", A[2]="(", L[2]=")",S[4]="END",COM1[2]="D";
    int valor=0,flag = 1 ,i=0,flag1 = 2,flag2 = 2 ,flag3 = 2 ,flag4 =2,flag5 =2,n=0;

   lista1 = criaLista(); 
    scanf("%s",COM);
    flag = strcmp(COM, S);
	n = contaChar(COM);
   while(flag){
		
		flag5 = bemFormada(COM);
		if (flag5==1)
			printf("SIM\n");
		else
			printf("NAO\n");
			
		
        scanf("%s",COM);
		n = contaChar(COM);
        flag = strcmp(COM, S);
		
		valor=0;
		flag5 =2;
		  

    }

   
}

tipoNo *criaLista() {
   tipoNo *l;
   l = (tipoNo *) malloc (sizeof(tipoNo));
   l->prox = NULL;
   return l;
}

tipoNo *inserirLista(tipoNo *l, int valor) {
   tipoNo *novo, *aux;
   novo = (tipoNo *) malloc (sizeof(tipoNo));
   novo->valor = valor;
   aux = l;
   novo->prox = aux->prox;
   aux->prox = novo;

}

void removerLista (tipoNo *l) {
   tipoNo *aux, *delete;
   aux = l; 
   if (aux->prox) {   
      delete = aux->prox;
      aux->prox = aux->prox->prox;
      free(delete);
   }
}

void imprimeLista (tipoNo *l) {
   tipoNo *aux;
   aux = l->prox;
   printf ("Lista: ");
   while (aux) {
      printf ("%d ", aux->valor);
      aux = aux->prox;
   }
   printf ("\n");
}

void removeAllLista(tipoNo *l) {
   tipoNo *aux,*cam;
   aux = l->prox;
   while(aux){
   cam=aux->prox;
   free(aux);
   aux=cam;
   }
}

/*void concatenacaoLista (tipoNo *l1, tipoNo *l2) {
   tipoNo *aux;
   aux = l1;
   while (aux->prox) {
      aux = aux->prox;
   }    
   aux->prox = l2->prox;
}

tipoNo *intercalaLista (tipoNo *l1, tipoNo *l2) {
   tipoNo *aux1, *aux2;
   tipoNo *lista;
   lista = criaLista();
   aux1 = l1->prox;
   aux2 = l2->prox;   
   while (aux1 && aux2) {
      if (aux1->valor < aux2->valor) {
         inserirLista(lista,aux1->valor);   
         aux1 = aux1->prox;
      } else {
         inserirLista(lista,aux2->valor);   
         aux2 = aux2->prox;      
      }
   }
   
   while (aux1) {
      inserirLista(lista,aux1->valor);   
      aux1 = aux1->prox;      
   }

   while (aux2) {
      inserirLista(lista,aux2->valor);   
      aux2 = aux2->prox;      
   }   
   return lista;
}*/

/*void buscaLista (tipoNo *l, int valor) {
   tipoNo *aux;
   aux = l->prox;
   printf ("Lista: ");
   while (aux) {
      if (aux->valor == valor) printf ("%d ", aux->valor);
      aux = aux->prox;
   }
   printf ("\n");
}
*/