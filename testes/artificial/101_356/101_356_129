
/*				LABORATORIO DE PROGRAMAÇÃO B -
		- Aluno: Marivaldo Rodrigues  -  Turma 02   -   Matricula: 21351819 -
				Exercício - Atividade de 09 de janeiro 2014
	  #######################################################################################################
		    Este programa deve receber uma cadeia de caracteres com uma expressão aritmética e simplesmente verificar se o número de operandos e o número de operadores estão corretos. Se sim, deve ser impresso SIM, caso contrário deve ser impresso NAO. Uma expressão é CORRETA se possui o número operandos exatamente igual ao número de operadores mais um.

O programa deve ler um número indeterminado de expressões aritméticas (cadeias de caracteres) e escrever se a expressão está correta ou não. A última cadeia é igual a END. Considere que os identificadores de variáveis sejam uma única letra maiúscula; que só existam os quatro operadores aritméticos binários (+, -, * e /); e que possa ter tanto parêntesis quanto colchetes.
	Dicas:

		Entradas:
		A-B+
		A+*
		A/BC
		A+B/C
		END

		Saídas:
		NAO
		NAO
		NAO
		SIM 
	 #######################################################################################################	
*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define TAMANHO 100

typedef struct tipono{
	char valor;
	struct tipono *prox;
}tipono;

typedef struct tipopliha{
	struct tipono *topo;
}tipopilha;

tipopilha *criarpilha();
tipono *empilha(tipopilha *pilha, char text);
int vazia(tipopilha *p);
void desempilha(tipopilha *p);
void imprime(tipopilha *p);
int compara(tipopilha *p, char letr);
int compara_oper(tipopilha *p);

char main(){
	tipopilha *pilha;
	char tend[]= "END",texto[TAMANHO];
	int i, tam, valor, flagg2=1;
	scanf("%s", texto);
	while((strcmp(texto, tend)!=0)){
		pilha=criarpilha();
			tam=strlen(texto);
			for(i=0; i<tam-1;i++){
				if((texto[i]=='['&&texto[i+1]==']')||(texto[i]=='('&&texto[i]==')')){				
					texto[i]='X'; texto[i+1]='X';
					}
			}
			for(i=0; i<tam;i++){
				if ((texto[i]=='[')||(texto[i]==']')||(texto[i]=='(')||(texto[i]==')')){
				
					if(compara(pilha, texto[i])) desempilha(pilha);
					else pilha->topo=empilha(pilha, texto[i]);
				}
			}	
				if(vazia(pilha)) flagg2=0;

			if (flagg2==0){
				for(i=0; i<tam;i++){
					if ((texto[i]!='[')&&(texto[i]!=']')&&(texto[i]!='(')&&(texto[i]!=')')){
						pilha->topo=empilha(pilha, texto[i]);
					}
				}

				if (compara_oper(pilha)) printf("SIM");
				else printf("NAO");
				printf("\n");
			}
			else printf("NAO\n");
		scanf("%s", texto);
	 free(pilha);	
	}		
}

tipopilha *criarpilha(){
	tipopilha *p;
	p=(tipopilha *)malloc(sizeof(tipopilha));
	p->topo=NULL;
	return p;
}

int vazia(tipopilha *p){
	if (p->topo) return 0;
	return 1;
}

tipono *empilha(tipopilha *p, char caracter){
	tipono *no;
	no=(tipono *)malloc(sizeof(tipono));
	no->valor=caracter;
	no->prox=p->topo;
	return no;
}

void desempilha(tipopilha *p){
	tipono *aux;
	if (vazia(p)) return;
	aux=p->topo;
	p->topo=aux->prox;
	free(aux);
}

int compara(tipopilha *p, char letr){
	tipono *aux;
	if (vazia(p)) return 0;
	aux=p->topo;
	if((aux->valor=='(' && letr==')')) return 1;
	if((aux->valor=='[' && letr==']')) return 1;
	return 0; 
}

int compara_oper(tipopilha *p){
	tipono *aux;
	int i;
	if (vazia(p)) return 0;
	aux=p->topo;
	while(aux->prox){
		if((aux->valor!='+'&&aux->valor!='-'&&aux->valor!='*'&&aux->valor!='/') && (aux->prox->valor=='+'||aux->prox->valor=='-'||aux->prox->valor=='*'||aux->prox->valor=='/')){
			desempilha(p);
			if(aux->prox->prox)desempilha(p);
		}
		else return 0;
		aux=p->topo;
	}
	p->topo=aux->prox;
	if(aux->valor!='+'&&aux->valor!='-'&&aux->valor!='*'&&aux->valor!='/') return 1;
	else return 0;
}

void imprime(tipopilha *p){
	tipono *aux;
	aux=p->topo;
	while(aux){
		printf("%c", aux->valor);
		aux=aux->prox;
	} 
	printf("\n");
}

