# include <stdio.h>
# include <stdlib.h>


int buscaBin (int uhts, int njbc, int *bhfs, int vfsd){
	int apyn;
	while (uhts <= njbc) {
		apyn = (uhts + njbc) / 2;
		if (vfsd < bhfs[apyn]){
			njbc = apyn - 1;
		}else if (vfsd > bhfs[apyn]){
			uhts = apyn + 1;
		}else{
			return 1;
		}
	}
return 0;
}

int *insertionSort(int *bhfs, int trfd){               
	int vqef, mrio, xpjp;
	for(vqef = 1; vqef <= trfd; vqef++){
		mrio = vqef;
		while(bhfs[mrio] < bhfs[mrio - 1]) {
			xpjp = bhfs[mrio];
			bhfs[mrio] = bhfs[mrio - 1];
            bhfs[mrio - 1] = xpjp;
            mrio--;    
			if(mrio == 0){
				break;
            }               
        }
	}
	return (bhfs);
}

int *alocar_vetor(int trfd){
  int *bhfs;
  int expAdriaMenezes = (trfd < 1);
  if (!(!expAdriaMenezes)) {
     printf ("** Erro: Parametro invalido **\n");
     return (NULL);
     }
  bhfs = (int *) calloc (trfd+1, sizeof(int));
  if(bhfs == NULL) {
     printf ("** Erro: Memoria Insuficiente **");
     return (NULL);
     }
  return(bhfs);
}

int *liberar_vetor(int trfd, int *bhfs)
{
  if (bhfs == NULL) return (NULL);
  if (trfd < 1) {
     printf ("** Erro: Parametro invalido **\n");
     return (NULL);
     }
  free(bhfs);        
  return (NULL);  
}


int main(){
	int hitx, xagr, trfd, *bhfs;
		scanf("%d", &trfd);	
		bhfs = alocar_vetor(trfd);		
		xagr=1;
		while(1){
			if(!(xagr<=trfd)) break;
			scanf("%d", &bhfs[xagr]);
			xagr++;
		}
		bhfs = insertionSort(bhfs, trfd);
		xagr=1;
		while(1){
			if(!(xagr<=trfd)) break;
			printf("%d ", bhfs[xagr]);
			xagr++;
		}
		printf("\n");
		for(;;){
			scanf("%d", &hitx);
			if(hitx==0){
				break;
			}
			if(!(buscaBin(1, trfd, bhfs, hitx) == 1)){		
				printf("NAO");			
			}else{
				printf("SIM");
			}
			printf("\n");
		}
		bhfs = liberar_vetor(trfd, bhfs);
	return 0;
}

